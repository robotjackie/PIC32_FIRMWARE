~inc:header.inc~
<div id="content">

<div id="status">
	<div id="loading" style="display:none">Error:<br />Connection to demo board was lost.</div>
	<div id="display">
	<!--<span style="float:right;font-size:9px;font-weight:normal;padding-top:8px;text-indent:0px">(click to toggle)</span>-->
		<p>LED:<br /><span class="leds">
		<!-- this is commented out temporarily -->
	<!--<a id="led2" onclick="newAJAXCommand('leds.cgi?led=2');">&bull;</a>
		<a id="led1" onclick="newAJAXCommand('leds.cgi?led=1');">&bull;</a>-->
		<a id="led0">&bull;</a>
		</span></p>
		<p>Buttons:<br />
		<span id="btn2">?</span> &nbsp;
		<span id="btn1">?</span> &nbsp;
		<span id="btn0">?</span></p>
		<p>Random Number: <span id="pot0" style="font-weight:normal">?</span></p>
	</div>
</div>

<h1>Welcome!</h1>

<table style="padding-left: 10px;">
<tr><td><b>Stack Version:</b></td><td>&nbsp;</td><td>~version~</td></tr>
<tr><td><b>Build Date:</b></td><td>&nbsp;</td><td>~builddate~</td></tr>
<tr><td><b>File System Location:</b></td><td>&nbsp;</td><td>~drive~</td></tr>
<tr><td><b>File System Type:</b></td><td>&nbsp;</td><td>~fstype~</td></tr>
</table>

<h2>Browser-based Device Configuration</h2>

<p>This demo showcases how to configure and program an embedded
Wi-Fi device that does not have a natural keyboard and screen.  By using the internal webserver
that accompanies the Microchip TCP/IP stack, end-users can use their browser as a conduit
for programming the device with the correct network parameters.</p>

<p></p>For a wireless network, an end-user would need to have knowledge of at least the following information:</p>
<ul>
<li>SSID name</li>
<li>Security type (WEP, WPA, WPA2)</li>
<li>Security key</li>
</ul>

<p>As pioneered by most modern operating systems, Easy Configuration also has the ability to scan for
all networks in the vicinity of the device, and display them to the user.  The user will
also be given additional information about the network such as whether security is enabled
or how far away the other network is.  Users are also given the opportunity to enter all the
network information manually, which is required when trying to connect to a network with a
hidden SSID.</p>

<p>There are two menu items on the left hand side.  The first is the current page you see,
which shows similar information to the standard Microchip TCP/IP Demo Stack (status of the LEDs,
buttons, and potentiometer).</p>

<p>The second menu item (Network Configuration), will display a page that will allow you to scan
for nearby networks, see them, and then connect to another network.  After the attempt is made
to connect to the new network, you will have to transition your wireless PC, laptop, or handheld
wireless device to this new network in order to see that the device has indeed changed networks.</p>

</div>

<script type="text/javascript">
<!--
// Parses the xmlResponse from status.xml and updates the status box
function updateStatus(xmlData) {
	var mainstat = document.getElementById('display').style.display;
	var loadstat = document.getElementById('loading').style.display;

	// Check if a timeout occurred
	if(!xmlData)
	{
		mainstat = 'none';
		loadstat = 'inline';
		return;
	}

	// Make sure we're displaying the status display
	mainstat = 'inline';
	loadstat = 'none';

	// Loop over all the LEDs
	for(i = 0; i < 1; i++) // Temporarily change 3 to 1
		document.getElementById('led' + i).style.color = (getXMLValue(xmlData, 'led' + i) == '1') ? '#090' : '#ddd';

	// Loop over all the buttons
	for(i = 0; i < 3; i++)
		document.getElementById('btn' + i).innerHTML = (getXMLValue(xmlData, 'btn' + i) == 'up') ? '&Lambda;' : 'V';

	// Update the POT value
	document.getElementById('pot0').innerHTML = getXMLValue(xmlData, 'pot0');
}
setTimeout("newAJAXCommand('status.xml', updateStatus, true)",500);
//-->
</script>

<script type="text/javascript">
<!--
document.getElementById('hello').innerHTML = "~hellomsg~";
//-->
</script>
~inc:footer.inc~
